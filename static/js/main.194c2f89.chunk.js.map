{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","Renderer","link","href","title","text","App","props","state","input","initial","update","handleChange","bind","event","this","setState","target","value","id","onChange","React","Component","Preview","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iSAOAA,IAAOC,WAAW,CAChBC,QAAQ,KAEO,IAAIF,IAAOG,UACnBC,KAAM,SAASC,EAAKC,EAAMC,GACjC,MAAO,mCAA4BF,EAA5B,aAAqCE,GAAS,Q,IAGjDC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAOC,EACPC,OAAQD,GAIZ,EAAKE,aAAe,EAAKA,aAAaC,KAAlB,gBARD,E,yDAWNC,GACXC,KAAKC,SAAS,CACZL,OAAQG,EAAMG,OAAOC,MACrBT,MAAMK,EAAMG,OAAOC,U,+BAMrB,OACE,yBAAKC,GAAG,WAEN,8BAAUA,GAAG,SAASC,SAAUL,KAAKH,aAAcM,MAAOH,KAAKP,MAAMC,QACrE,yBAAKU,GAAG,eACN,kBAAC,EAAD,CAASR,OAAQI,KAAKP,MAAMG,e,GA1BpBU,IAAMC,WAiClBC,EAAU,SAAChB,GACb,OACE,yBAAKY,GAAG,UAAUK,wBAAyB,CAACC,OAAQ3B,IAAOS,EAAMI,YAIjED,EAAQ,w0CA4CCJ,ICtFKoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.194c2f89.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport marked from 'marked';\nimport jquery from 'jquery';\n\n\n\nmarked.setOptions({\n  breaks: true,\n})\nconst renderer = new marked.Renderer();\nrenderer.link= function(href,title,text){\n  return `<a target='_blank' href='${href}'>${text}` + '</a>';\n}\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props)\n    this.state = {\n      input: initial,\n      update: initial\n    }\n  \n  \n  this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event){\n    this.setState({\n      update: event.target.value,\n      input:event.target.value\n    })\n  };\n\n  \n  render(){\n    return (\n      <div id='general'>\n        \n        <textarea id='editor' onChange={this.handleChange} value={this.state.input}></textarea>\n        <div id='preview-box'>\n          <Preview update={this.state.update}/>\n        </div>\n      </div>\n    )\n  };\n};\n\nconst Preview = (props) => {\n    return (\n      <div id='preview' dangerouslySetInnerHTML={{__html: marked(props.update)}} />\n    )\n}\n\nconst initial=\n`# Aloha There! \n\n## This Is My Interactive Markdown Project!\n\n### It is the first time I am building a web application using React, so please bear with me a moment.\n\nAlthough I have done some cool stuff already, such as:\n- random quote machine\n- technical documentation site\n- personal portfolio\n- staff manager using object-oriented programming, etc.\n\nOn the way, I also learned some pretty powerful things.\n1. My numero uno is **PYTHON**\n2. But I also like _JavaScript_\n3. I cannot forget about HTML and CSS\n4. I hope the list will go on and ON ...\n\n## You can check out some of my projects on my [GitHub](https://github.com/petra-vozarova) page.\n\nIt is a rough path but you know ...\nDon't wish it was easier. Wish you were better.\n                                                *Jim Rohn*\n\nYeah, I know.. So let's just illustrate my mindset very quick:\n\n\\`\\`\\`\n    function success(hard-work, dedication) {\n      let results = hard-work + dedication;\n      return results;\n    };\n\\`\\`\\`\n\nOr in a much quicker way: **\\` const results =(hardwork, dedication) => {hardwok + dedication}; \\`**\n\nI think this is it for now.. so keep it up and peace out!\n\n![Picture of colorful leafs](https://images.unsplash.com/photo-1540317700647-ec69694d70d0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60)\n\n`\n\n/*$('body').css('background-color', '#969696')*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}